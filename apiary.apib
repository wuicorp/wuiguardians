FORMAT: 1A

# wuiguardians
REST api based on OAuth2 authorization protocol to provide access to the wuiguardians.com resources.


# Group OAuth Tokens
## Token [/oauth/token]
### Retrieve a token [POST]

+ Request Retrieve client credentials token

    + Body
    
            {
                "grant_type": "client_credentials",
                "client_id": "<client-application-id>,
                "client_secret": "<client-application-secret>"
            }
            
+ Response 200 (application/json)
    
        {
            "access_token": "<client-credentials-access-token>",
            "expires_in": "7200",
            "token_type": "bearer"
        }
            
+ Request Retrieve password token

    + Body
    
            {
                "grant_type": "password",
                "username": "user@email.com",
                "password": "user-secret"
            }

+ Response 200 (application/json)

        {
            "access_token": "<password-access-token>",
            "expires_in": "7200",
            "refresh_token": "<refresh-token-for-password-access-token>"
            "token_type": "bearer"
        }
            
+ Request Retrieve refresh token (application/json)
    + Body
    
            {
                "grant_type": "refresh_token",
                "refresh_token": "<refresh-token-for-password-access-token>"
            }

+ Response 200 (application/json)

        {
            "access_token": "<password-refreshed-access-token>",
            "expires_in": "7200",
            "refresh_token": "<refresh-token-for-password-refreshed-access-token>"
            "token_type": "bearer"
        }


# Group Sessions

## Sessions Collection [/sessions]
### Create [POST]
This action assumes two possible flows:
+ If the user does not exist, it **registers** a new one for email and password provided.
+ If the user exists, it **authenticates** it using email and password provided.
    
In booth cases, it returns the tokens required to access user resources, but also the user resource.

+ Request
    + Headers

            Authorization: Bearer <client-credentials-access-token>
            
    + Body
    
            {
                "email": "user@mail.com",
                "password": "user-secret"
            }

+ Response 201 (application/json)

        {
            "access_token": "<password-access-token>",
            "expires_in": "7200",
            "refresh_token": "<refresh-token-for-password-access-token>"
            "token_type": "bearer",
            "user": {
                "id": "1",
                "email": "user@mail.com",
                "name": "User Name",
                "vehicles": [
                  { "id": "1", "identifier": "6699CMZ" },
                  { "id": "2", "identifier": "7777AYZ" }                  
                ]
            }
        }

## Provider sessions [/sessions/{provider}]
You can also create session for third party providers.

### Create [POST]
Allowed providers: **[facebook, google]**

+ Request
    + Headers

            Authorization: Bearer <client-credentials-access-token>

    + Body

            {
                "token": "<provider-access-token>"
            }

+ Response 201 (application/json)

        {
            "access_token": "<password-access-token>",
            "expires_in": "7200",
            "refresh_token": "<refresh-token-for-password-access-token>"
            "token_type": "bearer",
            "user": {
                "id": "1",
                "email": "user@mail.com",
                "name": "User Alias"
            }
        }


# Group Users

## Me [/users/me]
Retireves the user owner of the password-access-token.

### Get [GET]
+ Request
    + Headers

            Authorization: Bearer <password-access-token>

+ Response 200 (application/json)

        {
            "id": "1",
            "email": "user@email.com",
            "name": "User Alias",
            "vehicles": [
                { "id": "1", "identifier": "6699CMZ" },
                { "id": "2", "identifier": "7777AYZ" }
            ]
        }

### Update [PUT]
+ Request
    + Headers

            Authorization: Bearer <password-access-token>

    + Body

            { "name": "New Alias" }

+ Response 200 (application/json)

        {
            "id": "1",
            "email": "user@email.com",
            "name": "New Alias"
            "vehicles": [
                { "id": "1", "identifier": "6699CMZ" },
                { "id": "2", "identifier": "7777AYZ" }
            ]
        }


# Group Vehicles
## Vehicles Collection [/vehicles]
### Get [GET]
Retrieve all vehicles of the password-access-token owner.

+ Request
    + Headers

            Authorization: Bearer <password-access-token>

+ Response 200 (application/json)

        [
            { "id": "1", "identifier": "6699CMZ" },
            { "id": "2", "identifier": "7777AYZ" }
        ]

### Create [POST]
Create vehicle for the password-access-token owner.

+ Request
    + Headers

            Authorization: Bearer <password-access-token>

    + Body

            { "identifier": "6699CMZ" }

+ Response 201 (application/json)

        { "id": "1", "identifier": "6699CMZ" }

## Vehicle [/vehicles/{id}]
### Update [PUT]
+ Request
    + Headers

            Authorization: Bearer <password-access-token>

    + Body

            { "identifier": "5599CMZ" }

+ Response 200 (application/json)

        { "id": "1", "identifier": "5599CMZ" }

### Delete [DELETE]
+ Request
    + Headers

            Authorization: Bearer <password-access-token>

+ Response 200 (application/json)


# Group Wuis
## Wuis Collection [/wuis]
### Get [GET]
Get all wuis sent and received for the password-access-token owner.

+ Request
    + Headers

            Authorization: Bearer <password-access-token>

+ Response 200 (application/json)
    
        [{
            "id": "1",
            "wui_type": "crash",
            "action": "sent",
            "status": "pending",
            "updated_at": "2015-03-18T18:16:55.349Z",
            "vehicle": {
                "id": "1",
                "identifier": "6699CMZ"
            }
        },
        {
            "id": "3",
            "wui_type": "park",
            "action": "received",
            "status": "confirmed",
            "updated_at": "2015-03-18T18:15:55.329Z",
            "vehicle": {
                "id": "3",
                "identifier": "7777JPQ"
            }
        }]

### Create "Send" [POST]
This action creates a wui, but also sends it to to the required vehicle.

+ Request
    + Headers

            Authorization: Bearer <password-access-token>

    + Body

            { "wui_type": "crash", "vehicle_identifier": "6699CMZ" }
            
+ Response 201 (application/json)
    
        {
            "id": "1",
            "wui_type": "crash",
            "status": "sent",
            "updated_at": "2015-03-23T14:29:30.278Z",
            "vehicle": {
                "id": "1"
                "identifier": "6699CMZ"
            }
        }

## Wui [/wuis/{id}]
### Update [PUT]
Updates the Wui through it's {id}. 
It's just permited to update the `status` attribute with the following values:
*[received, truthy, falsey]*

+ Request
    + Headers

            Authorization: Bearer <password-access-token>

    + Body

            { "status": "received" }

+ Response 200 (application/json)
    
        {
            "id": "1",
            "wui_type": "crash",
            "status": "received",
            "updated_at": "2015-03-23T14:29:30.278Z",
            "vehicle": {
                "id": "1"
                "identifier": "6699CMZ"
            }
        }
